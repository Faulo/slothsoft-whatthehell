Adventure.Controller = Trait.build({	uses : [	],	construct : function() {		this.serializer = new XMLSerializer();		this.parser = new DOMParser();		this.pulls = {};	},	vars : {		model		: undefined,		view		: undefined,		controller	: undefined,				parser		: undefined,		serializer	: undefined,				pulls		: undefined,				events 		: {		},		actionCodes : {			"game.drop" : function(param) {				if (window.viewMapHack) {					window.viewMapHack.dropElement(param);				}				if (window.viewGodHack) {					window.viewGodHack.dropElement(param);				}			},			"game.loadView" : function(param) {				this.loadView(param);			},			"game.exit" : function() {				while (document.hasChildNodes()) {					document.removeChild(document.lastChild);				}			},			"game.closeMenu" : function() {				var ele = document.getElementById("menuDrop");				if (ele) {					ele.parentNode.removeChild(ele);				}			},		},	},	methods : {		start : function() {			this.sendMessage(ACTION.MODEL_START, { test : "erfolg! â™ª" });		},		init : function(config) {		},		sendMessage : function(action, payload) {			this.model.postMessage({				action : action,				payload : payload === undefined					? null					: payload			});		},		parseMessage : function(action, payload) {			switch (action) {				case ACTION.DEBUG:					alert(payload);					break;				case ACTION.CONTROLLER_START:					this.init(payload);					break;				case ACTION.CONTROLLER_UPLOAD:					this.mapUpload(payload);					break;				case ACTION.CONTROLLER_DOWNLOAD:					this.mapDownload(payload);					break;			}			return false;		},		loadView : function(name, view) {			var parentId;			parentId = view				? view.viewId				: 0;			this.sendMessage(				ACTION.MODEL_VIEW_LOAD,				{					name : name,					parent : parentId				}			);		},		parseAction : function(actionName, paramList) {			if (!paramList) {				paramList = [];			}			if (this.actionCodes[actionName]) {				this.actionCodes[actionName].apply(this, paramList);			} else {				var param, list = actionName.split(".");				if (list.length) {					param = list.pop();					this.parseAction(list.join("."), [param]);				} else {					alert("UNKWNOWN ACTION:\n"+actionName);				}			}		},		addPullListener : function(uri, pullHandler) {			if (!this.pulls[uri]) {				this.pulls[uri] = new Adventure.Controller.Pull(uri, pullHandler);				/*				this.sendMessage(					ACTION.MODEL_PULL_REGISTER,					uri				);				this.pulls[uri] = pullHandler;				//*/			}		},		handlePush : function(uri, data) {			this.sendMessage(				ACTION.MODEL_PUSH,				{					uri : uri,					data : data				}			);		},		mapUpload : function(ele) {			//*			this.sendMessage(				ACTION.MODEL_UPLOAD,				this.serializer.serializeToString(ele)			);		},		mapDownload : function(ele) {			this.sendMessage(				ACTION.MODEL_DOWNLOAD,				ele.getAttribute("id")			);		},		parseMap : function(ele, xml) {			var child;			child = ele.ownerDocument.importNode(				this.parser.parseFromString(xml, "application/xml").documentElement,				true			);			ele.parentNode.replaceChild(child, ele);			return child;		},	}});